{"name":"Assignment 5: Improve performance of BVH construction","tagline":"CMU 15-462/662 Assignment 5: Improve performance of BVH construction","body":"## Final Project: Improve performance of BVH construction\r\n\r\nMy topic for the final project is option F: Advanced Monte Carlo Rendering. And the track I implemented is improving the performance of the BVH path tracing. I followed the article _“Fast Parallel Construction of High-Quality Bounding Volume Hierarchies”_. However, I tried to realize a Parallel construction system but since I'm new to the area I didn't make it. So I didn’t realize the full function out.\r\n\r\nI will introduce the functions I have for now. The performance improving functions are based on the assignment 3. And currently all the works are done in the bvh.cpp.\r\n\r\nSince we already have a basic BVH structure ready from assignment 3. I started with it and tried to form the treelet structure according to the article. The overall idea is: For each node, set the number of leaf node to 7 and the internal node number to 5. While traveling through the original BVH tree. Rearrange the relationship of the \"internal node\" according to the new SAH cost of every possible arrangement. And let the smallest cost one to be the final internal node arrangement, keeping the relationship of the internal node and the corresponding leaf nodes.\r\n\r\nI have the following functions to realize the thought above:\r\n\r\n* getArea() \r\n    * Input: the maximum and minimum value of the vertex.\r\n    * Output: the surface area.\r\n\r\n> get the surface area of the bounding box according to the diagonal line’s vertex.\r\n\r\n```\r\ndouble getArea(double min_x, double max_x, double min_y, double max_y, double min_z, double max_z) {\r\n  double dx = max_x - min_x;\r\n  double dy = max_y - min_y;\r\n  double dz = max_z - min_z;\r\n  return 2 * (dx * dy + dx * dz + dy * dz);\r\n}\r\n```\r\n\r\n* getTotalArea()\r\n    * Input: the leaves of the node and the number of the leaves\r\n    * Output: the total bounding box area of the leaves\r\n\r\n> get the total area of the bounding box of the leaves\r\n\r\n```\r\ndouble getTotalArea(int n, std::vector<BVHNode *> leaves) {\r\n  double lmin_x, lmin_y, lmin_z, lmax_x, lmax_y, lmax_z;\r\n  double min_x = INF_D;\r\n  double max_x = -INF_D;\r\n  double min_y = INF_D;\r\n  double max_y = -INF_D;\r\n  double min_z = INF_D;\r\n  double max_z = -INF_D; \r\n  for (int i = 0; i < n; i++) {\r\n    // if ((s >> i) & 1 == 1) {\r\n    lmin_x = leaves[i]->bb.min.x;\r\n    lmin_y = leaves[i]->bb.min.y;\r\n    lmin_z = leaves[i]->bb.min.z;\r\n    lmax_x = leaves[i]->bb.max.x;\r\n    lmax_y = leaves[i]->bb.max.y;\r\n    lmax_z = leaves[i]->bb.max.z;\r\n    if (lmin_x < min_x) min_x = lmin_x;\r\n    if (lmin_y < min_y) min_y = lmin_y;\r\n    if (lmin_z < min_z) min_z = lmin_z;\r\n    if (lmax_x > max_x) max_x = lmax_x;\r\n    if (lmax_y > max_y) max_y = lmax_y;\r\n    if (lmax_z > max_z) max_z = lmax_z;\r\n    // }\r\n  } \r\n  return getArea(min_x, max_x, min_y, max_y, min_z, max_z);\r\n}\r\n```\r\n\r\n* mergeBox()\r\n    * Input: bounding box1, bounding box2, bounding box3\r\n    * Output: void\r\n\r\n> reset the bounding box3’s attributes using the smallest and largest attributes from bounding box1 and bounding box2.\r\n\r\n```\r\nvoid mergeBox(BBox& b1, BBox& b2, BBox* b3) {\r\n   b3->min.x = std::min(b1.min.x, b2.min.x);\r\n   b3->max.x = std::max(b1.max.x, b2.max.x);\r\n   b3->min.y = std::min(b1.min.y, b2.min.y);\r\n   b3->max.y = std::max(b1.max.y, b2.max.y);\r\n   b3->min.z = std::min(b1.min.z, b2.min.z);\r\n   b3->max.z = std::max(b1.max.z, b2.max.z);\r\n   return;\r\n}\r\n```\r\n\r\n* optimizeTreelet()\r\n    * Input: the number of the leaves\r\n    * Output: void\r\n\r\n> rearrange the leaves' partition to get the smallest cost arrangement\r\n\r\n```\r\nvoid optimizeTreelet(int n, std::vector<BVHNode *> leaves) {\r\n  int num_subsets = pow(2, n) - 1;\r\n\r\n  double area[128];\r\n  double c_opt[128];\r\n\r\n  // Calculate surface area for each subset\r\n  for (int s = 1; s <= num_subsets; s++) {\r\n    area[s] = getTotalArea(n, leaves, s);\r\n  }\r\n\r\n  // Initialize costs of individual leaves\r\n  for (int i = 0; i <= (n-1); i++) {\r\n    c_opt[pow(2, i)] = leaves[i]->cost;\r\n  }\r\n\r\n  // Optimize every arrangement of leaves\r\n  for (unsigned k = 2; k <= n; k++) {\r\n    for (unsigned char s = 1; s <= num_subsets; s++) {\r\n        // Try each way of partitioning the leaves\r\n        double c_s = INF_D;\r\n        unsigned char p_s = 0;\r\n        unsigned char d = (s - 1) & s;\r\n        unsigned char p = (-d) & s;\r\n        while (p != 0) {\r\n          float c = c_opt[p] + c_opt[s ^ p];\r\n          if (c < c_s) {\r\n              c_s = c;\r\n              p_s = p;\r\n          }\r\n          \r\n          p = (p - d) & s;\r\n        }\r\n        // Calculate final SAH cost\r\n        c_opt[s] = 1.2 * a[s] + c_s;\r\n        p_opt[s] = p_s;\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n* updateCost()\r\n\r\n    * Input: node from the BVH\r\n    * Output: void\r\n\r\n> for the node in the tree calculate the cost of each node according to it's children's cost\r\n\r\n```\r\nvoid updateCost(BVHNode *root, std::vector<BVHNode *>leaves, int num_leaves) {\r\n    for (int i = 0; i < num_leaves; i++) {\r\n        BVHNode *cur = leaves[i];\r\n        cur = cur->p;\r\n        while (cur != root) {\r\n            if (cur->cost == 0.0) {\r\n                if (cur->left->cost != 0.0 && cur->right->cost != 0.0) {\r\n                    // Both left & right propagated\r\n                    BBox *bb_cur = &cur->bound;\r\n                    merge_bounds(cur->l->bb, cur->right->bb, bb_cur);\r\n                    cur->cost = Ct * cur->bb->surface_area() + cur->left->cost + cur->right->cost;\r\n                } else {\r\n                    // Only one side propagated\r\n                    break;\r\n                }\r\n            }\r\n            cur = cur->p;\r\n        }\r\n    }\r\n\r\n    // Cost of the root\r\n    BBox *bbox = &root->bb;\r\n    merge_bounds(root->l->bb, root->r->bb, bbox);\r\n    root->cost = Ct * root->bb->surface_area() + root->l->cost + root->r->cost;\r\n}\r\n```\r\n\r\n* rebuildBVH()\r\n    * Input: the leaves and nodes of the current node\r\n    * Output: the rebuilt out structure of the current node\r\n\r\n> rebuild the BVH structure of the current node\r\n\r\n```\r\nvoid rebuildBVH(std::vector<BVHNode *>leaves, std::vector<BVHNode *>nodes, int num_leaves, bool left, BVHNode *parent) {\r\n    int i = leaves.length();\r\n    while (i > 0) {\r\n      i--;\r\n      BVHNode *leaf = leaves[i];\r\n      if (left) {\r\n        parent->l = leaf;\r\n      } else {\r\n        parent->r = leaf;\r\n      }\r\n        leaf->p = parent;\r\n    }\r\n    int j = nodes.length();\r\n    while(j > 0)\r\n    {       \r\n       BVHNode *node = nodes[];\r\n       node->cost = 0.0;\r\n       if (left) {\r\n         parent->left = node;\r\n       } else {\r\n         parent->right = node;\r\n       }\r\n         node->parent = parent;    \r\n    }\r\n    updateCost(parent, leaves, num_leaves);\r\n}\r\n```\r\n\r\n* treeletOptimize()\r\n    * Input: current node\r\n    * Output: void\r\n\r\n> Optimize the treelet structure of the current node\r\n\r\n```\r\nvoid treeletOptimize(BVHNode *root) {\r\n    if (root->isLeaf()) return;\r\n\r\n    // Find a treelet with max number of leaves being 7\r\n    std::vector<BVHNode *>leaves(7);\r\n    int counter = 0;\r\n    leaves[counter++] = root->l;\r\n    leaves[counter++] = root->r;\r\n\r\n    std::vector<BVHNode *>nodes(5);\r\n    int nodes_counter = 0;\r\n\r\n    double max_area;\r\n    int max_index = 0;\r\n\r\n    while (counter < 7 && max_index != -1) {\r\n        max_index = -1;\r\n        max_area = -1.0;\r\n\r\n        for (int i = 0; i < counter; i++) {\r\n            if (!(leaves[i]->leaf)) {\r\n                float area = leaves[i]->area;\r\n                if (area > max_area) {\r\n                    max_area = area;\r\n                    max_index = i;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (max_index != -1) {\r\n\r\n            BVHNode *tmp = leaves[max_index];\r\n\r\n            // Put this node in nodes array\r\n            nodes[nodes_counter++] = tmp;\r\n\r\n            // Replace the max node with its children\r\n            leaves[max_index] = leaves[counter - 1];\r\n            leaves[counter - 1] = tmp->l;\r\n            leaves[counter++] = tmp->r;\r\n        }\r\n    }\r\n\r\n    unsigned char optimal[128];\r\n\r\n    // Call calculateOptimalCost here\r\n    optimizeTreelet(counter, leaves);\r\n\r\n    // Use complement on right tree, and use original on left tree\r\n    unsigned char mask = (1 << counter) - 1;    // mask = max index\r\n    int index = 0;                              // index for free nodes\r\n    unsigned char leftIndex = mask;\r\n    unsigned char left = optimal[leftIndex];\r\n    rebuildBVH(leaves, nodes, left, counter, root);\r\n\r\n    unsigned char right = (~left) & mask;\r\n    rebuildTree(leaves, nodes, right, counter, root);\r\n\r\n    // Calculate current node's area & cost\r\n    BBox *bound = &root->bb;\r\n    mergeBox(root->l->bb, root->r->bb, bound);\r\n    root->cost = Ci * root->bb->getArea() + root->l->cost + root->r->cost;\r\n}\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}